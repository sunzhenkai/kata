#!/usr/bin/python3
# coding: utf-8

import os.path
import json
import random

DATA_FILE = 'data.json'


class Problem:
    def __init__(self, name: str = '', desc: str = ''):
        self.name = name
        self.desc = desc

class ProblemManager:
    def __init__(self, data_file: str ='data.json'):
        self.load(data_file)

    def load(self, data_file: str):
        pass


def load():
    if not os.path.exists(DATA_FILE) or os.path.getsize(DATA_FILE) == 0:
        with open(DATA_FILE, 'w+') as f:
            f.write('{ "data": [] }')

    with open(DATA_FILE, 'r') as f:
        dt = json.load(f)
        if 'data' not in dt:
            dt['data'] = []
        return dt


def sink(dt):
    with open(DATA_FILE, 'w+') as f:
        json.dump(dt, f, indent=4, ensure_ascii=False)


def pt(rd):
    print(rd['name'])
    print('#' * 5)
    print(rd['desc'])


def add():
    name = input('name: ').strip()
    desc = []
    print('desc: ', end='')
    while True:
        ip = input().strip()
        if '...' == ip:
            break
        desc.append(ip)
    dt = load()
    dt['data'].append({'name': name, 'desc': '\n'.join(desc)})
    sink(dt)


def take():
    dt = load()['data']
    if len(dt) == 0:
        print('no candidate')
    else:
        ro = random.randint(0, len(dt) - 1)
        rd = dt[ro]
        pt(rd)


def find():
    k = input('name: ')
    dt = load()['data']
    for it in dt:
        if k in it['name']:
            pt(it)


def remove():
    name = input('name: ').strip()
    og = load()
    dt = og['data']
    tr = []
    for i in dt:
        if 'name' in i and i['name'] == name:
            tr.append(i)
    for i in tr:
        dt.remove(i)
    sink(og)


def show():
    dt = load()['data']
    flag = True
    for rd in dt:
        if flag:
            flag = False
        else:
            print('\n', '-' * 50, end='\n\n', sep='')
        pt(rd)


if __name__ == "__main__":
    while True:
        op = input('command [add|take|find|rm|show|quit] : ').strip()
        if op == 'exit' or op == 'quit' or op == 'q':
            break
        elif op == 'add':
            add()
        elif op == 'find':
            find()
        elif op == 'take' or op == 'tk':
            take()
        elif op == 'remove' or op == 'rm':
            remove()
        elif op == 'show' or op == 'll':
            show()
        else:
            print('unkown operation', op)
